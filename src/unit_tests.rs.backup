#[test]
fn time_slot_iterator_range_returns_all_tuesdays() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
        repetition: Repetition::TUESDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 6).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 7).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 13).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 14).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 20).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 21).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 27).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 28).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_wednesdays() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
        repetition: Repetition::WEDNESDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 7).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 8).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 14).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 15).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 21).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 22).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 28).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 29).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_thursdays() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
        repetition: Repetition::THURSDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 2).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 8).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 9).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 15).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 16).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 22).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 23).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 29).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_fridays() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
        repetition: Repetition::FRIDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 2).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 3).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 9).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 10).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 16).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 17).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 23).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 24).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 10, 1).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_saturdays() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
        repetition: Repetition::SATURDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 3).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 4).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 10).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 11).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 17).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 18).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 24).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 25).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_sundays() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
        repetition: Repetition::SUNDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 4).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 5).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 11).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 12).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 18).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 19).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 25).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 26).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_weekdays() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 9, 14).and_hms_opt(0, 0, 0),
        repetition: Repetition::WEEKDAYS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 2).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 2).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 3).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 5).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 6).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 6).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 7).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 7).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 8).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 8).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 9).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 9).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 10).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 12).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 13).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 13).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 14).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_all_weekends() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 9, 30).and_hms_opt(0, 0, 0),
        repetition: Repetition::WEEKENDS,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 3).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 4).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 4).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 5).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 10).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 11).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 11).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 12).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 17).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 18).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 18).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 19).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 24).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 25).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 25).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 26).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_weeks() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2022, 10, 1).and_hms_opt(0, 0, 0),
        repetition: Repetition::Weekly,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2022, 9, 1).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 5).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 5).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 12).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 12).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 19).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 19).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 9, 26).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2022, 9, 26).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2022, 10, 1).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_weeks_starting_on_a_sunday() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2023, 1, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2023, 2, 1).and_hms_opt(0, 0, 0),
        repetition: Repetition::Weekly,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2023, 1, 1).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 1, 2).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 1, 2).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 1, 9).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 1, 9).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 1, 16).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 1, 16).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 1, 23).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 1, 23).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 1, 30).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 1, 30).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 2, 1).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

#[test]
fn time_slot_iterator_range_returns_weeks_ending_on_a_sunday() {
    let r = TimeSlotIterator {
        start: NaiveDate::from_ymd(2023, 4, 1).and_hms_opt(0, 0, 0),
        end: NaiveDate::from_ymd(2023, 5, 1).and_hms_opt(0, 0, 0),
        repetition: Repetition::Weekly,
    };

    assert_eq!(
        r.into_iter().collect::<Vec<_>>(),
        vec![
            (
                NaiveDate::from_ymd(2023, 4, 1).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 4, 3).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 4, 3).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 4, 10).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 4, 10).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 4, 17).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 4, 17).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 4, 24).and_hms_opt(0, 0, 0),
            ),
            (
                NaiveDate::from_ymd(2023, 4, 24).and_hms_opt(0, 0, 0),
                NaiveDate::from_ymd(2023, 5, 1).and_hms_opt(0, 0, 0),
            ),
        ]
    )
}

